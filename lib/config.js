// Generated by CoffeeScript 1.9.1
(function() {
  'use strict';
  exports.defaults = function() {
    return {
      markdown: {
        extensions: ['md'],
        options: {}
      }
    };
  };

  exports.placeholder = function() {
    return "\t\n  # markdown:\n    # extensions: ['md']                      # The list of file extensions which will be considered as\n                                              # markdown files, therefore they will be compiled\n    # options:                                # Object with the `marked` settings options.\n                                              # Check https://github.com/chjj/marked to know what options\n                                              # are available; this module by default doesn't modify the\n                                              # default options that `marked` takes.\n                                              # NOTE: The only options that differ from the original\n                                              # `marked` settings options are\n                                              # -`renderer`, which can be\n                                              #       - Function: it will be considered that is a constructor,\n                                              #         so the constructor must instantiate a valid `marked`\n                                              #         renderer object\n                                              #       - String: the name of a node module which must export\n                                              #         a constructor function under 'Renderer' name. The\n                                              #         module will be required as usual, so it can be\n                                              #         a dependency module or just a script path which\n                                              #         must be relative to the project's root folder\n                                              #       - Object: a valid `marked` renderer instance\n                                              #\n                                              #    e.g. You can populate this option parameter as \"marked\",\n                                              #         which will instance the `marked` default renderer,\n                                              #         of course it will produce the same effect than\n                                              #         not to populate this option parameter\n                                              # - `highlight`, can be\n                                              #       - Function: the function which performs the\n                                              #         syntax highlighting as `marked` requires\n                                              #       - String: the name of a node module which must export\n                                              #         the function which performs the syntax highlighting\n                                              #         as `marked` requires; it can be a dependency module\n                                              #         or just a script path which must relative to the\n                                              #         project's root folder\n                                              #";
  };

  exports.validate = function(config, validators) {
    var errors, extension, i, len, ref, rendererOptionType;
    errors = [];
    if (validators.ifExistsIsObject(errors, 'markdown config', config.markdown)) {
      if (validators.ifExistsIsArray(errors, 'markdown.extensions', config.markdown.extensions)) {
        ref = config.markdown.extensions;
        for (i = 0, len = ref.length; i < len; i++) {
          extension = ref[i];
          if (typeof extension !== 'string') {
            errors.push('markdown.extensions must be an array of strings');
            break;
          }
        }
      }
      if (validators.ifExistsIsObject(errors, 'markdown.options', config.markdown.options)) {
        if (config.markdown.options.renderer != null) {
          rendererOptionType = typeof config.markdown.options.renderer;
          if (rendererOptionType !== 'string' && rendererOptionType !== 'object' && rendererOptionType !== 'function') {
            errors.push('markdown.options.renderer must be a string or an object or a function');
          }
        }
        if (config.markdown.options.highlight != null) {
          rendererOptionType = typeof config.markdown.options.highlight;
          if (rendererOptionType !== 'string' && rendererOptionType !== 'function') {
            errors.push('markdown.options.highlight must be a string or a function');
          }
        }
      }
    }
    return errors;
  };

}).call(this);
