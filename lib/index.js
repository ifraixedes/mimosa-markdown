// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var config, path, registerCommand, registration, _markdownCompiler;

  path = require('path');

  config = require('./config');

  registration = function(mimosaConfig, register) {
    return register(['add', 'update', 'buildFile'], 'compile', _markdownCompiler(mimosaConfig.root, mimosaConfig.markdown), mimosaConfig.markdown.extensions);
  };

  registerCommand = function(program, retrieveConfig) {};

  _markdownCompiler = function(projectRootDir, markdownConfig) {
    var marked, markedOptions, utilFile;
    marked = require('marked');
    utilFile = require('./util/file');
    markedOptions = utilFile.clonePlainObject(markdownConfig.options);
    if (markedOptions.renderer) {
      markedOptions.renderer = (function() {
        switch (typeof markedOptions.renderer) {
          case 'function':
            return new markedOptions.renderer;
          case 'string':
            return new (markedOptions.renderer.indexOf(path.sep) === -1 ? require(marked.renderer) : require(path.join(projectRootDir, markedOptions.renderer))).Renderer;
          default:
            return markedOptions.renderer;
        }
      })();
    }
    if (markedOptions.highlight) {
      markedOptions.highlight = (function() {
        switch (typeof markedOptions.highlight) {
          case 'string':
            return require(path.join(projectRootDir, markedOptions.highlight));
          default:
            return markedOptions.highlight;
        }
      })();
    }
    return function(mimosaConfig, options, next) {
      var currentFile;
      currentFile = options.files[0];
      return marked(currentFile.inputFileText.toString(), function(err, htmlOuput) {
        currentFile.outputFileText = htmlOuput;
        currentFile.outputFileName = utilFile.swapFileNameExtension(currentFile.outputFileName, 'html');
        return next();
      });
    };
  };

  module.exports = {
    registration: registration,
    registerCommand: registerCommand,
    defaults: config.defaults,
    placeholder: config.placeholder,
    validate: config.validate
  };

}).call(this);
